#!/bin/bash
# shellcheck disable=SC2034
###############################################################################
# DIRECTORIES
###############################################################################
media_dir="INSERT_ROOT_DIR"

# Cloud directories
cloud_encrypt_dir="${media_dir}/.cloud-encrypt"
cloud_decrypt_dir="${media_dir}/.cloud-decrypt"

# Local directory
local_decrypt_dir="${media_dir}/.local-decrypt/Media"
plexdrive_temp_dir="${media_dir}/.local-decrypt/plexdrive"

# Media directory (FINAL)
local_media_dir="${media_dir}/media"


# Encrypt media (0 means no encryption)
encrypt_media=1


###############################################################################
# UNION-FS
###############################################################################
ufs_bin="/usr/bin/unionfs"

# Mount user Id's. Replace $(id with a different ID if you need to override.
uid=$(id -u)
gid=$(id -g)

# Delete flag used to enable deletions from local media dir by enabling RW. Will not write, but will allow delete.
delete_flag=0 # Set to "1" if you want directly read/write access to the cloud mount.

ufs_options="-o cow,allow_other,direct_io,nonempty,auto_cache,sync_read,uid=$uid,gid=$gid"

###############################################################################
# PLEXDRIVE
###############################################################################
plexdrive_dir="${media_dir}/plexdrive"
plexdrive_bin="${plexdrive_dir}/plexdrive-linux-amd64"

mongo_database="plexdrive"
mongo_host="localhost"
mongo_user=""
mongo_password=""

if [ "$delete_flag" == "1" ]; then
    plexdrive_options="--temp=${plexdrive_temp_dir} -o allow_other --clear-chunk-max-size=300G --clear-chunk-age=24h --chunk-size=10M"
else
    plexdrive_options="--temp=${plexdrive_temp_dir} -o allow_other,read_only --clear-chunk-max-size=300G --clear-chunk-age=24h --chunk-size=10M"
fi

###############################################################################
# RCLONE
###############################################################################
rclone_dir="${media_dir}/rclone"
rclone_bin="${rclone_dir}/rclone"

rclone_config="${rclone_dir}/rclone.conf"
rclone_options="--buffer-size 500M --checkers 16"

rclone_beta="0" # Set this to "1" if you want to live dangerous and try out rclone latest beta.

if [ "$delete_flag" == "1" ]; then
    rclone_mount_options="${rclone_options} --allow-non-empty --allow-other --max-read-ahead 30G"
else
    rclone_mount_options="${rclone_options} --read-only --allow-non-empty --allow-other --max-read-ahead 30G"
fi


# Rclone endpoints
rclone_cloud_endpoint="gd-crypt:"
rclone_local_endpoint="local-crypt:"

google_drive_media_directory="" # Empty means media files are in root

upload_limit="0" # This is only used to check within cloudupload script. This number should be in GB and greater than 0 be activated.
move_limit="0" # This is only used to check within rmlocal script. This number should be in GB and greater than 0 be activated.


###############################################################################
# Plex (empty trash)
###############################################################################
plex_url="http://localhost:32400"
plex_token=""


###############################################################################
# MISC. CONFIG
###############################################################################
date_format="+%F@%T"

# Select to remove media files based on 'time', 'space' or 'instant'
#remove_files_based_on="instant"
#remove_files_based_on="time"
remove_files_based_on="space"


# Remove media files based on 'time'
remove_files_older_than=60 # In days

# Remove media files based on 'space'
remove_files_when_space_exceeds=500 # In Gigabytes
freeup_atleast=300  # In Gigabytes
